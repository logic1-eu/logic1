>>> from logic1 import *
>>> from logic1.theories.RCF import *

>>> a, b, c, d, x, y, z = VV.get('a', 'b', 'c', 'd', 'x', 'y', 'z')
>>> x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11 = VV.get(*(f'x{i}' for i in range(12)))

# doi:10.1006/jsco.1997.0123, Sect. 5.3
>>> simplify(And(a == 0, Or(b != 0, And(c <= 0, Or(d > 0, a == 0)))))
And(a == 0, Or(c <= 0, b != 0))
>>> simplify(And(a == 0, Or(b == 0, And(c == 0, d >= 0)), Or(d != 0, a != 0)))
And(d != 0, a == 0, Or(b == 0, And(d > 0, c == 0)))

# Test implicit negation and extended Boolean operators
>>> simplify(T)
T
>>> simplify(Not(T))
F
>>> simplify(Eq(1, 0))
F
>>> simplify(Not(Eq(1, 0)))
T
>>> simplify(a == 0)
a == 0
>>> simplify(Not(a == 0))
a != 0

>>> simplify(And(a > b, Equivalent(a == 0, b > 0)))
And(b <= 0, a != 0, a - b > 0)

>>> simplify(Or(a > b, Equivalent(a == 0, b > 0)))
Or(a - b > 0, And(Or(b <= 0, a == 0), Or(b > 0, a < 0)))

# Test quantifiers
>>> VV.push()
>>> a, b, c, d = VV.get('a', 'b', 'c', 'd')
>>> simplify(Or(a > b, Equivalent(a == 0, Ex(a, a > b))))
Or(a - b > 0, And(Or(a == 0, All(a, a - b <= 0)), Or(a != 0, Ex(a, a - b > 0))))
>>> VV.pop()

# Test assumption
>>> VV.push()
>>> a, b, c, d = VV.get('a', 'b', 'c', 'd')
>>> simplify(Or(a > b, Equivalent(a == 0, Ex(a, a > b))), assume=[a == 0])
Or(b < 0, Ex(a, a - b > 0))
>>> VV.pop()

>>> simplify(Ex(a, And(a > 5, b > 10)), assume=[a > 10, b > 20])
Ex(a, a - 5 > 0)

# Test explode_always
>>> simplify(And(a * b == 0, c == 0))
And(c == 0, Or(b == 0, a == 0))
>>> simplify(And(a * b == 0, c == 0), explode_always=False)
And(c == 0, a*b == 0)
>>> simplify(Or(a * b == 0, c == 0), explode_always=False)
Or(c == 0, b == 0, a == 0)

# Test prefer_weak
>>> assert simplify(And(a != 0, Or(b == 0, a >= 0)))\
...     == simplify(And(a != 0, Or(b == 0, a >= 0)), prefer_weak = False)

>>> simplify(And(a != 0, Or(b == 0, a >= 0)), prefer_weak=False)  # default
And(a != 0, Or(b == 0, a > 0))
>>> simplify(And(a != 0, Or(b == 0, a > 0)), prefer_weak=False)  # default
And(a != 0, Or(b == 0, a > 0))
>>> simplify(And(a != 0, Or(b == 0, a >= 0)), prefer_weak=True)
And(a != 0, Or(b == 0, a >= 0))
>>> simplify(And(a != 0, Or(b == 0, a > 0)), prefer_weak=True)
And(a != 0, Or(b == 0, a >= 0))

>>> simplify(Or(a == 0, And(b == 0, a >= 0)), prefer_weak=False)  # default
Or(a == 0, And(b == 0, a > 0))
>>> simplify(Or(a == 0, And(b == 0, a > 0)), prefer_weak=False)  # default
Or(a == 0, And(b == 0, a > 0))
>>> simplify(Or(a == 0, And(b == 0, a >= 0)), prefer_weak=True)
Or(a == 0, And(b == 0, a >= 0))
>>> simplify(Or(a == 0, And(b == 0, a > 0)), prefer_weak=True)
Or(a == 0, And(b == 0, a >= 0))

# Test prefer_order
>>> assert simplify(Or(a > 0, And(b == 0, a != 0)))\
...     == simplify(Or(a > 0, And(b == 0, a != 0)), prefer_order=True)

>>> simplify(Or(a > 0, And(b == 0, a < 0)), prefer_order=True)  # default
Or(a > 0, And(b == 0, a < 0))
>>> simplify(Or(a > 0, And(b == 0, a != 0)), prefer_order=True)  # default
Or(a > 0, And(b == 0, a < 0))
>>> simplify(Or(a > 0, And(b == 0, a < 0)), prefer_order=False)
Or(a > 0, And(b == 0, a != 0))
>>> simplify(Or(a > 0, And(b == 0, a != 0)), prefer_order=False)
Or(a > 0, And(b == 0, a != 0))

>>> simplify(And(a >= 0, Or(b == 0, a > 0)), prefer_order=True)  # default
And(a >= 0, Or(b == 0, a > 0))
>>> simplify(And(a >= 0, Or(b == 0, a != 0)), prefer_order=True)  # default
And(a >= 0, Or(b == 0, a > 0))
>>> simplify(And(a >= 0, Or(b == 0, a > 0)), prefer_order=False)
And(a >= 0, Or(b == 0, a != 0))
>>> simplify(And(a >= 0, Or(b == 0, a != 0)), prefer_order=False)
And(a >= 0, Or(b == 0, a != 0))

# Do not prefer order over equality
>>> simplify(And(a <= 0, Or(b != 0, a == 0)), prefer_order=True)
And(a <= 0, Or(b != 0, a == 0))
>>> simplify(And(a <= 0, Or(b != 0, a >= 0)), prefer_order=True)
And(a <= 0, Or(b != 0, a == 0))

# Test is_valid
>>> is_valid(3 * b**2 + c**2 >= 0)
True
>>> is_valid(3 * b**2 + c**2 < 0)
False
>>> is_valid(a * b**2 + c**2 >= 0, assume=[a > 0])  # return None

# Examples by NF during the development of simpl_and_or:
>>> simplify(And(x + y == 0, Or(And(x == 0, y != 0), And(x != 0, y == 0))))
F
>>> simplify(And(x**2 + y == 0, Or(And(x == 0, y != 0), And(x != 0, y == 0))))
F

# The following example shows that it is necessary to resest the ir in
# simpl_and_or when new substitutions have been found
>>> simplify(And(x**2 + y**2 + z > 0, z == 1))
z - 1 == 0

#  Regressions of problems during development

>>> a, b, c, d = VV.get('a', 'b', 'c', 'd')

>>> simplify(-5*(a-b)*(a+b) <= 0)
a^2 - b^2 >= 0

>>> i2, n, p1, q, td, z = VV.get('i2', 'n', 'p1', 'q', 'td', 'z')

>>> simplify((-100*n + 10*td + 2500*z + 36519) * a <= 0)
100*a*n - 10*a*td - 2500*a*z - 36519*a >= 0

>>> simplify((-100*n + 10*td + 2500*z + 36519) * a == 0)
Or(100*n - 10*td - 2500*z - 36519 == 0, a == 0)

>>> simplify(-16 * (a-1)**2 * (a+1)**3 <= 0)
a + 1 >= 0

# derived from p9
>>> f1 = Or(x6 < 0, x5 - x6 != 0,
...         And(Or(x5 < 0, x4 - x5 + x6 != 0), Or(x5 >= 0, x4 + x5 + x6 != 0)),
...         And(Or(x4 < 0, x3 - x4 + x5 != 0), Or(x4 >= 0, x3 + x4 + x5 != 0)),
...         And(Or(x3 < 0, x2 - x3 + x4 != 0), Or(x3 >= 0, x2 + x3 + x4 != 0)),
...         And(Or(x2 < 0, x1 - x2 + x3 != 0), Or(x2 >= 0, x1 + x2 + x3 != 0)))
>>> simplify(f1)
Or(x6 < 0, x5 - x6 != 0, x4 != 0, x3 + x6 != 0, And(Or(x6 == 0, x2 - x6 != 0),
Or(x6 > 0, x2 != 0)), And(Or(x2 < 0, x1 - x2 - x6 != 0), Or(x2 >= 0, x1 + x2 -
x6 != 0)))

>>> f2 = And(-x5 <= 0,
...          Or(-x5 + x6 > 0, And(-x5 == 0, x6 == 0)),
...          Or(x6 == 0, And(x6 < 0, x6 == 0)),
...          Or(And(x5 < 0, x4 + x5 + x6 == 0), And(x5 >= 0, x4 - x5 + x6 == 0)))
>>> simplify(f2)
And(x6 == 0, x5 == 0, x4 == 0)
